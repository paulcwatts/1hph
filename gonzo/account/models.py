from django.db import models
from django.db.models.signals import post_save
from django.contrib import admin
from django.contrib.auth.models import User

from gonzo.hunt.models import *
from gonzo.utils.thumbs import ImageWithThumbsField

class Profile(models.Model):
    user = models.OneToOneField(User, primary_key=True)
    # User's profile pic
    photo = ImageWithThumbsField(null=True,
                                 blank=True,
                                 upload_to="profile_photos",
                                 max_length=256,
                                 height_field='photo_height',
                                 width_field='photo_width',
                                 sizes=((60,60),))
    photo_width = models.IntegerField(null=True)
    photo_height = models.IntegerField(null=True)

    # The user gets points by doing stuff, and can spend them somehow
    points = models.IntegerField(default=0)
    # The user's score is the total number of points they have amassed,
    # regardless of how much they have spent
    score = models.IntegerField(default=0)
    # The user's rank is a basic indication of how "experienced"
    # the user is, and grants a user additional privileges
    rank = models.PositiveIntegerField(default=0)
    # Twitter authentication
    twitter_screen_name = models.CharField(max_length=128,null=True,blank=True)
    twitter_oauth_token = models.CharField(max_length=200,null=True,blank=True)
    twitter_oauth_secret = models.CharField(max_length=200,null=True,blank=True)
    # Whether or not your activity is public
    public_activity = models.BooleanField(default=True)

    def __unicode__(self):
        return self.user.username

"""
User activity:

This is a log of the user's activity, generated by signals sent by the hunt model.

Some of the current activities:
1. Submit an entry to a hunt
2. Begin voting
3. Won an award
4. Make a comment

For the time being this is generated directly from the hunt DB,
but could potentially be added as a separate table and populated by signals.
"""
def user_activity(user,since=None):
    def getkey(v):
        if isinstance(v,Hunt):
            return v.create_time
        else:
            return v.time

    result = []
    if since:
        if since.utcoffset():
            raise ValueError("We don't support TZ-aware times just yet")
        since = since.replace(tzinfo=None)
        result.extend(Hunt.objects.filter(owner=user,create_time__gte=since))
        result.extend(Submission.objects.filter(user=user,time__gte=since))
        result.extend(Comment.objects.filter(user=user,time__gte=since))
        result.extend(Vote.objects.filter(user=user,time__gte=since))
        result.extend(Award.objects.filter(user=user,time__gte=since))
    else:
        result.extend(Hunt.objects.filter(owner=user))
        result.extend(Submission.objects.filter(user=user))
        result.extend(Comment.objects.filter(user=user))
        result.extend(Vote.objects.filter(user=user))
        result.extend(Award.objects.filter(user=user))
    result.sort(key=getkey,reverse=True)
    # Finally, we want to collapse all contiguous voting into a single one
    to_remove = []
    i = 0
    in_vote = False
    start_vote = None
    for v in result:
        if isinstance(v,Vote):
            if not in_vote:
                in_vote=True
                start_vote=i
        elif in_vote:
            if start_vote+1 < i:
                to_remove.append((start_vote+1,i))
            in_vote=False
        i = i+1

    for r in to_remove:
        result[r[0]:r[1]] = []

    return result



# Create the profile when the user is created
def user_post_save(sender, **kwargs):
    if kwargs.get('created'):
        # Create profile
        p = Profile(user=kwargs['instance'])
        p.save();
post_save.connect(user_post_save, sender=User)

# TODO: Signals
# Voting is one point
# Submitting is X points
# When an award is assigned, then add its value to our points/score

admin.site.register(Profile)
